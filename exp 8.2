const express = require("express");
const jwt = require("jsonwebtoken");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(express.json());

// Dummy user for demo
const USER = {
  email: "test@example.com",
  password: "123456",
};

// Secret key for signing JWTs
const JWT_SECRET = "mysecretkey123";

// Login route (generate token)
app.post("/api/login", (req, res) => {
  const { email, password } = req.body;

  if (email === USER.email && password === USER.password) {
    // Create JWT Token
    const token = jwt.sign({ email }, JWT_SECRET, { expiresIn: "1h" });
    res.json({ success: true, token });
  } else {
    res.status(401).json({ success: false, message: "Invalid credentials" });
  }
});

// Middleware to verify token
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) return res.status(403).json({ message: "No token provided" });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(401).json({ message: "Invalid token" });
    req.user = user;
    next();
  });
}

// Protected route
app.get("/api/protected", verifyToken, (req, res) => {
  res.json({
    message: `Welcome ${req.user.email}! You accessed a protected route `,
  });
});

// Start server
const PORT = 5000;
app.listen(PORT, () => console.log(` Server running on port ${PORT}`));

import React, { useState } from "react";

function App() {
  const [email, setEmail] = useState("test@example.com");
  const [password, setPassword] = useState("123456");
  const [token, setToken] = useState(localStorage.getItem("token") || "");
  const [message, setMessage] = useState("");

  // Login and get JWT token
  const handleLogin = async (e) => {
    e.preventDefault();

    const res = await fetch("http://localhost:5000/api/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password }),
    });

    const data = await res.json();

    if (data.success) {
      setToken(data.token);
      localStorage.setItem("token", data.token);
      setMessage("Login successful!");
    } else {
      setMessage("Invalid credentials");
    }
  };

  // Access protected route
  const handleProtected = async () => {
    const res = await fetch("http://localhost:5000/api/protected", {
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await res.json();
    setMessage(data.message || data.error);
  };

  // Logout
  const handleLogout = () => {
    localStorage.removeItem("token");
    setToken("");
    setMessage("Logged out successfully");
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white p-8 rounded-2xl shadow-lg w-96">
        <h2 className="text-2xl font-bold text-center mb-6">JWT Login Demo</h2>

        {!token ? (
          <form onSubmit={handleLogin}>
            <div className="mb-4">
              <label className="block mb-1 font-medium">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="mb-6">
              <label className="block mb-1 font-medium">Password</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <button
              type="submit"
              className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition"
            >
              Login
            </button>
          </form>
        ) : (
          <div className="text-center">
            <button
              onClick={handleProtected}
              className="bg-green-600 text-white py-2 px-4 rounded-lg mt-4 hover:bg-green-700"
            >
              Access Protected Route
            </button>
            <button
              onClick={handleLogout}
              className="bg-red-600 text-white py-2 px-4 rounded-lg mt-4 ml-2 hover:bg-red-700"
            >
              Logout
            </button>
          </div>
        )}

        {message && (
          <p className="mt-6 text-center text-gray-700 font-medium">{message}</p>
        )}
      </div>
    </div>
  );
}

export default App;
